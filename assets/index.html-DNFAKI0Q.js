import{_ as t,c as l,a,b as n,d as s,e as o,f as d,r,o as p}from"./app-LcY0-K8R.js";const c={};function u(v,e){const i=r("RouteLink");return p(),l("div",null,[e[11]||(e[11]=a(`<h1 id="developing-introduction" tabindex="-1"><a class="header-anchor" href="#developing-introduction"><span>Developing Introduction</span></a></h1><p>As a developer, we should know how to develop a backend service. The following sections will introduce you to the basic concepts of backend development and how to use DYAPI2 to develop a backend service.</p><p>With the help of DYAPI2, creating a backend service is just creating Models, Controllers, and Middlewares. But we should know the file structure of a DYAPI2 project first.</p><h2 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure"><span>File Structure</span></a></h2><p>The file structure of a DYAPI2 project is as follows:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">├── config </span>
<span class="line">│    ├── settings.js</span>
<span class="line">│    ├── middlewares.js</span>
<span class="line">│    └── &lt;Your-Js-Files&gt;</span>
<span class="line">├── data</span>
<span class="line">├── dyapi</span>
<span class="line">│    ├── dyapi.js</span>
<span class="line">│    ├── jwt.dyapi.js</span>
<span class="line">│    ├── JsonContainer.dyapi.js</span>
<span class="line">│    ├── SQLiteContainer.dyapi.js</span>
<span class="line">│    └── SqlUtility.js</span>
<span class="line">├── create.js</span>
<span class="line">├── update.js</span>
<span class="line">├── index.js</span>
<span class="line">└── package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>create.js</code> and <code>update.js</code> files are for creating and updating DYAPI system. If you don&#39;t want to get up-to-date with the latest updates, you can remove these files.</p><p>The <code>index.js</code> file is the main entry point for the project.</p><p>The <code>dyapi</code> directory contains the core codes for DYAPI, which will be discussed in detail in next sections.</p><p>The <code>data</code> directory is where we should put database files in, but is not compulsory.</p>`,10)),n("p",null,[e[1]||(e[1]=s("In the ")),e[2]||(e[2]=n("code",null,"config",-1)),e[3]||(e[3]=s(" directory, there is a ")),e[4]||(e[4]=n("code",null,"settings.js",-1)),e[5]||(e[5]=s(" file that contains the ")),o(i,{to:"/zh/developing/globalSettings.html"},{default:d(()=>e[0]||(e[0]=[s("Global Settings")])),_:1}),e[6]||(e[6]=s(" for the project. ")),e[7]||(e[7]=n("strong",null,"Normally, developers' js files should also be in this directory, which will be automatically loaded when the server starts.",-1)),e[8]||(e[8]=s(" They defines the models, controllers and middlewares for the project. Due to the importance of the order of middlewares, we recommend you register all the middlewares in the ")),e[9]||(e[9]=n("code",null,"Middlewares.js",-1)),e[10]||(e[10]=s(" file."))])])}const h=t(c,[["render",u],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/zh/developing/","title":"Developing Introduction","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"File Structure","slug":"file-structure","link":"#file-structure","children":[]}],"git":{"updatedTime":1728307129000,"contributors":[{"name":"douyachan","email":"caohaozhe@163.com","commits":1}]},"filePathRelative":"zh/developing/README.md"}');export{h as comp,f as data};
