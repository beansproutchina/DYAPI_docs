import{_ as a,c as t,a as r,o as n}from"./app-LcY0-K8R.js";const i="/DYAPI_docs/assets/architecture-RlKKU2KV.png",o={};function l(d,e){return n(),t("div",null,e[0]||(e[0]=[r('<h1 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture"><span>Architecture</span></a></h1><p>This is the structure of DYAPI. To learn how to creating and customing them, please refer to the <a href="/developing/" target="_blank" rel="noopener noreferrer">Developing Reference</a>. To know how to deal with the data, continue reading the guide.</p><p><img src="'+i+'" alt=""></p><h2 id="container" tabindex="-1"><a class="header-anchor" href="#container"><span>Container</span></a></h2><p>A container represent a database. It wraps the structure of its database and SQLs, exposing create, read, update and delete functions. The following containers are provided by us, which can be found in <code>/dyapi/</code>:</p><ul><li>JSON Container</li><li>Sqlite Container</li><li>MySQL Container</li></ul><h2 id="model" tabindex="-1"><a class="header-anchor" href="#model"><span>Model</span></a></h2><p>A model represents a collection of items. It is a bridge between a container and API interface. It also defines the permission of the model and each field. It automatically generates the CRUD API interface on the URL <code>/api/{model_name}/</code>, whose behavior can be customized by adding <code>prehandlers</code>.</p><h2 id="field" tabindex="-1"><a class="header-anchor" href="#field"><span>Field</span></a></h2><p>A field is a property of any item in a model. It has its own permission. Validation rules and processors can also be defined.</p><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>Controller</span></a></h2><p>A controller defines an activity. If we analogy a Model to a Noun, a Controller is a Verb. It also automatically generates an API endpoint.</p><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h2><p>A service is &quot;controller under model&quot;. It also has its endpoint, but you can visit the model and check permission more conveniently than controller.</p><h2 id="middleware" tabindex="-1"><a class="header-anchor" href="#middleware"><span>Middleware</span></a></h2><p>A middleware is a function that runs before &amp; after every route. It can be used to check permission, or to modify the request body. An antispider middleware and a user permission middleware is integrated to the framework.</p>',16)]))}const c=a(o,[["render",l],["__file","architecture.html.vue"]]),h=JSON.parse('{"path":"/guide/architecture.html","title":"Architecture","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Container","slug":"container","link":"#container","children":[]},{"level":2,"title":"Model","slug":"model","link":"#model","children":[]},{"level":2,"title":"Field","slug":"field","link":"#field","children":[]},{"level":2,"title":"Controller","slug":"controller","link":"#controller","children":[]},{"level":2,"title":"Service","slug":"service","link":"#service","children":[]},{"level":2,"title":"Middleware","slug":"middleware","link":"#middleware","children":[]}],"git":{"updatedTime":1728307129000,"contributors":[{"name":"douyachan","email":"caohaozhe@163.com","commits":1}]},"filePathRelative":"guide/architecture.md"}');export{c as comp,h as data};
